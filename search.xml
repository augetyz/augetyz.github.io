<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STM32F4驱动USB实现虚拟串口</title>
    <url>/2023/07/15/stm32f4-qu-dong-usb-shi-xian-xu-ni-chuan-kou/</url>
    <content><![CDATA[<h1 id="STM32F4驱动USB实现虚拟串口"><a href="#STM32F4驱动USB实现虚拟串口" class="headerlink" title="STM32F4驱动USB实现虚拟串口"></a>STM32F4驱动USB实现虚拟串口</h1><h2 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h2><p>使用Dap-link和stlink的时候，就发现这些仿真器上并没有USB转TTL芯片，就可以实现USB转串口，实现虚拟串口，非常方便。这里实测得出，使用USB虚拟串口，可以轻松达到921600波特率，接近1M/s，因为这个虚拟串口实际就是USB通讯，使用USB通讯，模拟COM类通讯端口协议，实现串口通讯。</p>
<p>这个功能主要用于实现单片机通过USB线同上位机通讯，实现速率高（1M/s），稳定性强（USB线+差分信号），操作简单（串口通讯效果）的效果。</p>
<p>最终实现了单片机同上位机进行串口通讯，并编写了类似于HAL库串口通讯的USB串口通信操作函数，包括数据发送，printf发送，堵塞接收，中断接收等函数</p>
<p>注意，此方案单片机作为USB从机，同上位机（主机）通讯，不能够使用USB同使用了USB串口的其他设备通讯，因为他们也是从机。</p>
<h2 id="cubemx初始化"><a href="#cubemx初始化" class="headerlink" title="cubemx初始化"></a>cubemx初始化</h2><p>STM32F407VET6+CubeMx+MDK5</p>
<h3 id="系统时钟初始化"><a href="#系统时钟初始化" class="headerlink" title="系统时钟初始化"></a>系统时钟初始化</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F1.%E5%A4%96%E9%83%A8%E9%AB%98%E9%80%9F%E6%97%B6%E9%92%9F%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="外部高速时钟初始化"></p>
<h3 id="修改debug方式"><a href="#修改debug方式" class="headerlink" title="修改debug方式"></a>修改debug方式</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F2.%E8%B0%83%E8%AF%95%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE.jpg" alt="调试方式修改"></p>
<h3 id="GPIO配置"><a href="#GPIO配置" class="headerlink" title="GPIO配置"></a>GPIO配置</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F3.%E6%8C%89%E9%94%AE%20led%E9%85%8D%E7%BD%AE.jpg" alt="按键led配置"></p>
<h3 id="USB外设初始化"><a href="#USB外设初始化" class="headerlink" title="USB外设初始化"></a>USB外设初始化</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F4.%E5%85%A8%E9%80%9FUSB%E5%A4%96%E8%AE%BE%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="全速USB外设初始化"></p>
<p>啥都不用改，把中断打开记得</p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F5.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="中断配置"></p>
<h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F6.%E6%97%B6%E9%92%9F%E4%BF%AE%E6%94%B9.jpg" alt="修改时钟"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F7.%E5%B7%A5%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96.jpg" alt="配置工程"></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F8.%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE.jpg" alt="目录修改"></p>
<h3 id="keil5修改"><a href="#keil5修改" class="headerlink" title="keil5修改"></a>keil5修改</h3><p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F9.keil%E9%85%8D%E7%BD%AE.jpg" alt="勾选Micolib"></p>
<p><strong>初始化完成</strong></p>
<h2 id="实现HAL库uart通讯功能"><a href="#实现HAL库uart通讯功能" class="headerlink" title="实现HAL库uart通讯功能"></a>实现HAL库uart通讯功能</h2><p><strong>简单使用系统函数 <code>uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)</code>进行通讯</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
      led_GPIO_Port<span class="token operator">-&gt;</span>ODR<span class="token operator">^=</span>led_Pin<span class="token punctuation">;</span>

      <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>Tx_Buffer<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Tx_Buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/USB%E8%99%9A%E6%8B%9F%E4%B8%B2%E5%8F%A3%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%2F10.%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B%E6%88%AA%E5%9B%BE.jpg" alt="效果"></p>
<h3 id="设计USB-CDC-printf格式化输出函数"><a href="#设计USB-CDC-printf格式化输出函数" class="headerlink" title="设计USB_CDC_printf格式化输出函数"></a><strong>设计USB_CDC_printf格式化输出函数</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  USB虚拟串口格式化输出printf实现
  * @param  格式化输入
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">usb_printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    va_list args<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>
 
    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>UserTxBufferFS<span class="token punctuation">,</span> APP_TX_DATA_SIZE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>UserTxBufferFS<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>USB虚拟串口主要使用CDC通讯协议，在usbd_cdc_if.c文件中，有相关函数描述，其中数据中断接收回调函数需要重点关注</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">int8_t</span> <span class="token function">CDC_Receive_FS</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>Len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 6 */</span>
  
  <span class="token comment">/* 定义外部变量 */</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint16_t</span> Rx_Date_Num<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> UserRxBuffer<span class="token punctuation">[</span>APP_RX_DATA_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> Rx_status<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

  <span class="token comment">/* 保存接收到的数据 */</span>
  <span class="token function">Rx_date_save</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span><span class="token operator">*</span>Len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量小于或等于缓冲区大小，增加接收数据的数量 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&lt;=</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
      Rx_Date_Num<span class="token operator">+=</span><span class="token operator">*</span>Len<span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量大于缓冲区大小，将接收数据的数量设置为缓冲区大小 */</span>
  <span class="token keyword">else</span>
      Rx_Date_Num<span class="token operator">=</span>APP_RX_DATA_SIZE<span class="token punctuation">;</span>

  <span class="token comment">/* 如果接收状态为0 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 如果接收到的数据量大于或等于目标数据量 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>RX_goal_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* 将用户接收缓冲区的数据复制到p指向的位置 */</span>
      <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 减少接收数据的数量 */</span>
        Rx_Date_Num<span class="token operator">-=</span>RX_goal_num<span class="token punctuation">;</span>
      <span class="token comment">/* 将接收状态设置为1 */</span>
      Rx_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 设置USB设备的接收缓冲区 */</span>
  <span class="token function">USBD_CDC_SetRxBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 接收USB数据包 */</span>
  <span class="token function">USBD_CDC_ReceivePacket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 返回操作结果 */</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>USBD_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 6 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>虚拟串口的接收方式是覆盖式的，相关缓存区大小由宏定义 APP_RX_DATA_SIZE 确定</strong></p>
<p><strong>比方说，本次接受了8个字节数据，分别是，“12345678”，然后发送了4个字节数据，分别是“abcd”，则缓存区数据变为“abcd5678”，原数据会被覆盖</strong></p>
<p><strong>这样是不利于我们接收数据的，如果我要接收128个字节的数据，为防止数据丢失，我会设置256个字节宽度的缓存区，原系统的接受到的数据会被及时转存到用户自定义的缓存区内，随取随用。</strong></p>
<p><strong>所以代码里我们定义了<code>uint8_t UserRxBuffer[APP_RX_DATA_SIZE];</code>用于存储用户想要接收的信息，放置被覆盖，并定义了相关函数，操作读取数据</strong></p>
<h3 id="堵塞型数据接收函数"><a href="#堵塞型数据接收函数" class="headerlink" title="堵塞型数据接收函数*"></a><em>堵塞型数据接收函数</em>*</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  这个函数用于接收USB虚拟串口的数据
  * @param  Rx_Buffer: 接收缓冲区
  * @param  num: 需要接收的数据数量
  * @param  overtime: 超时时间
  * @retval 如果接收成功，返回1，如果超时，返回0
  */</span>
 
<span class="token class-name">uint8_t</span> <span class="token function">usb_vbc_Receive</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Rx_Buffer<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> overtime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    overtime<span class="token operator">=</span>overtime<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Rx_Date_Num<span class="token operator">-=</span>num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>num<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Rx_Date_Num<span class="token operator">-=</span>num<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                time<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>time<span class="token operator">&gt;</span>overtime<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="中断型数据接收函数"><a href="#中断型数据接收函数" class="headerlink" title="中断型数据接收函数"></a>中断型数据接收函数</h3><p><strong>内容较少，仅改变几个全局标志位的值，主要操作内容在中断回调函数里</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  开启接收数据，不堵塞，完成接收任务后，全局变量Rx_status置一，否则为0
  * @param  Rx_Buffer: 接收缓冲区
  * @param  num: 需要接收的数据数量
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Rx_Buffer<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    p<span class="token operator">=</span>Rx_Buffer<span class="token punctuation">;</span>
    RX_goal_num<span class="token operator">=</span>num<span class="token punctuation">;</span>
    Rx_status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>中断回调函数内的操作</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">int8_t</span> <span class="token function">CDC_Receive_FS</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buf<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token operator">*</span>Len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 6 */</span>
  
  <span class="token comment">/* 定义外部变量 */</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint16_t</span> Rx_Date_Num<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> UserRxBuffer<span class="token punctuation">[</span>APP_RX_DATA_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span> Rx_status<span class="token punctuation">;</span>
  <span class="token keyword">extern</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> p<span class="token punctuation">;</span>

  <span class="token comment">/* 保存接收到的数据 */</span>
  <span class="token function">Rx_date_save</span><span class="token punctuation">(</span>Buf<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span><span class="token operator">*</span>Len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量小于或等于缓冲区大小，增加接收数据的数量 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&lt;=</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
      Rx_Date_Num<span class="token operator">+=</span><span class="token operator">*</span>Len<span class="token punctuation">;</span>
  <span class="token comment">/* 如果接收到的数据量大于缓冲区大小，将接收数据的数量设置为缓冲区大小 */</span>
  <span class="token keyword">else</span>
      Rx_Date_Num<span class="token operator">=</span>APP_RX_DATA_SIZE<span class="token punctuation">;</span>

  <span class="token comment">/* 如果接收状态为0 */</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* 如果接收到的数据量大于或等于目标数据量 */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_Date_Num<span class="token operator">&gt;=</span>RX_goal_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">/* 将用户接收缓冲区的数据复制到p指向的位置 */</span>
      <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>UserRxBuffer<span class="token punctuation">,</span>RX_goal_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* 减少接收数据的数量 */</span>
        Rx_Date_Num<span class="token operator">-=</span>RX_goal_num<span class="token punctuation">;</span>
      <span class="token comment">/* 将接收状态设置为1 */</span>
      Rx_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* 设置USB设备的接收缓冲区 */</span>
  <span class="token function">USBD_CDC_SetRxBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 接收USB数据包 */</span>
  <span class="token function">USBD_CDC_ReceivePacket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hUsbDeviceFS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 返回操作结果 */</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>USBD_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 6 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="其他相关数据操作函数"><a href="#其他相关数据操作函数" class="headerlink" title="其他相关数据操作函数"></a>其他相关数据操作函数</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**
  * @brief  这个函数用于复制接收缓冲区的内容，并将缓存区数据移位
  * @param  Buffer_get: 获取缓冲区
  * @param  Buffer_put: 放置缓冲区
  * @param  num: 要复制的元素数量
  * @retval 无
  */</span>

<span class="token keyword">void</span> <span class="token function">Rx_buffer_copy</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buffer_get<span class="token punctuation">,</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> Buffer_put<span class="token punctuation">,</span><span class="token class-name">uint16_t</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//复制数据</span>
    <span class="token punctuation">{</span>
        Buffer_get<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Buffer_put<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Rx_Date_Num<span class="token operator">-</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//剩余数据移位</span>
    <span class="token punctuation">{</span>
        Buffer_put<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Buffer_put<span class="token punctuation">[</span>i<span class="token operator">+</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
  * @brief  这个函数用于将一个数组的内容复制到另一个数组中，而不会丢失接收数组中的原始数据
  * @param  src: 源数组
  * @param  dest: 目标数组
  * @param  n: 源数组中的元素数量
  * @retval 无
  */</span>
<span class="token keyword">void</span> <span class="token function">Rx_date_save</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span>Rx_Date_Num<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">+</span>n<span class="token operator">&gt;</span>APP_RX_DATA_SIZE<span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//超出缓存区大小，这里直接停止。</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        dest<span class="token punctuation">[</span>i<span class="token operator">+</span>num<span class="token punctuation">]</span><span class="token operator">=</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
  * @brief  这个函数用于获取USB接收缓存区的数据数量
  * @param  无
  * @retval 返回接收的数据数量
  */</span>

<span class="token class-name">uint16_t</span> <span class="token function">usb_Rx_Get_Num</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> Rx_Date_Num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* USER CODE BEGIN 1 */</span>
    <span class="token class-name">uint8_t</span> Rx_Buffer<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> Tx_Buffer<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"灵遨老六\n"</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 1 */</span>

  <span class="token comment">/* MCU Configuration--------------------------------------------------------*/</span>

  <span class="token comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span>
  <span class="token function">HAL_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN Init */</span>

  <span class="token comment">/* USER CODE END Init */</span>

  <span class="token comment">/* Configure the system clock */</span>
  <span class="token function">SystemClock_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* USER CODE BEGIN SysInit */</span>

  <span class="token comment">/* USER CODE END SysInit */</span>

  <span class="token comment">/* Initialize all configured peripherals */</span>
  <span class="token function">MX_GPIO_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MX_USB_DEVICE_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE BEGIN 2 */</span>
    <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* USER CODE END 2 */</span>

  <span class="token comment">/* Infinite loop */</span>
  <span class="token comment">/* USER CODE BEGIN WHILE */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">/* USER CODE END WHILE */</span>

    <span class="token comment">/* USER CODE BEGIN 3 */</span>
      led_GPIO_Port<span class="token operator">-&gt;</span>ODR<span class="token operator">^=</span>led_Pin<span class="token punctuation">;</span>
<span class="token comment">//      time=HAL_GetTick();</span>
<span class="token comment">//      CDC_Transmit_FS((uint8_t*)str, strlen(str));</span>
<span class="token comment">//      if(usb_vbc_Receive(Rx_Buffer,16,500)==0)</span>
<span class="token comment">//          usb_printf("超时:%d\n",HAL_GetTick()-time);</span>
<span class="token comment">//      else</span>
<span class="token comment">//          CDC_Transmit_FS((uint8_t*)Rx_Buffer, 16);</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>Rx_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token function">CDC_Transmit_FS</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">usb_vbc_Receive_It</span><span class="token punctuation">(</span>Rx_Buffer<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token comment">//      CDC_Transmit_FS(Tx_Buffer,strlen((char*)Tx_Buffer));</span>
      <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* USER CODE END 3 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>使用USB虚拟串口，用起来很爽，波特率能跑很高，主要可以应用在同ROS主机通讯上；具体细致学习，可以参考开源Dap-link的代码。</strong></p>
<p><a href="dap-link">dap-link</a></p>
<p><strong>另外想使用DMA的话，F4的还没实现，H7的可以，速度应该可以跑很高。</strong></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>F407</tag>
        <tag>USB</tag>
        <tag>虚拟串口</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>嵌入式学习简介</title>
    <url>/2023/07/23/qian-ru-shi-xue-xi-jian-jie/</url>
    <content><![CDATA[<h1 id="嵌入式学习方向介绍"><a href="#嵌入式学习方向介绍" class="headerlink" title="嵌入式学习方向介绍"></a>嵌入式学习方向介绍</h1><h2 id="视频简介"><a href="#视频简介" class="headerlink" title="视频简介"></a>视频简介</h2><iframe src="//player.bilibili.com/player.html?aid=378089584&amp;bvid=BV1Hf4y1w7BH&amp;cid=410341156&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>

<h2 id="嵌入式系统简介"><a href="#嵌入式系统简介" class="headerlink" title="嵌入式系统简介"></a>嵌入式系统简介</h2><p><strong>在我的两年学习经历中，嵌入式对我而言即是兴趣也是未来发展的方向。</strong></p>
<p><strong>在我看来，嵌入式就是设计合适的能够完成目标任务需求的电子装置。在其中，我们会使用电气知识设计适用的电路板，在其中添加计算机控制单元——MCU，我们使用C语言（主要）或者其他编程语言对单片机进行编程，实现控制需求。</strong></p>
<p><img src="https://biubiu-1319563496.cos.ap-nanjing.myqcloud.com/%E5%B5%8C%E5%85%A5%E5%BC%8F%E4%BB%8B%E7%BB%8D/ART-Pi.jpg" alt="1.单片机图"></p>
<p>比较正式的说法：<em><strong>嵌入式即嵌入式系统，IEEE（美国电气和电子工程师协会）对其定义是用于控制、监视或者辅助操作机器和设备的装置，是一种专用的计算机系统；国内普遍认同的嵌入式系统定义是以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗等严格要求的专用计算机系统；从应用对象上加以定义来说，嵌入式系统是软件和硬件的综合体，还可以涵盖机械等附属装置。</strong></em></p>
<p>嵌入式同时设计软件和硬件，在实际开发中，会专精一个方向，另一个辅修——嵌入式硬件工程师和嵌入式软件工程师，像我的话，主要是偏向软件方向，但我也会了解使用电路知识，PCB设计工具；认识的一个在公司里的硬件工程师大佬，就主攻硬件电路，软件方面主要使用STM32实现控制，会部署一些中间件在其中方便实现控制功能；</p>
<h2 id="科创中心嵌入式小组"><a href="#科创中心嵌入式小组" class="headerlink" title="科创中心嵌入式小组"></a>科创中心嵌入式小组</h2><p><strong>在大学生科创中心，开设有嵌入式学习小组，每年会招收新成员进入培训，指导学习STM32、PCB设计、运动控制、FreeRtos、物联网等技术知识，会有学长带领学员设计机器人、无人机、智能小车等嵌入式系统集成设备，在实践中学习，在学习中探索未来，提高工科生的自我认知。</strong></p>
<p>在实践学习中，科创中心的嵌入式小组主要发展为多个方向：</p>
<p><strong>无人机组</strong> ：</p>
<p><strong>工程小车组</strong>：</p>
<p><strong>物联网开发组</strong>：</p>
<p><strong>Ros机器人组</strong> ：</p>
<p><strong>有趣的作品分享</strong>:</p>
<iframe src="//player.bilibili.com/player.html?aid=226936627&amp;bvid=BV1Uh41137Th&amp;cid=1078338627&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>


<iframe src="//player.bilibili.com/player.html?aid=420981979&amp;bvid=BV12341117rG&amp;cid=421416333&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>   


<iframe src="//player.bilibili.com/player.html?aid=677612560&amp;bvid=BV1zm4y197Py&amp;cid=467867782&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="400px" height="300px"> </iframe>


]]></content>
  </entry>
  <entry>
    <title>第一次写博客</title>
    <url>/2023/07/14/di-yi-ci-xie-bo-ke/</url>
    <content><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>段落格式<br>在文段结尾添加两个空格并回车，即可换行完成段落结束<br>就像这样</p>
<p>当然也可以使用一个空行进行表示重新开始段落</p>
<p><em>斜体文本</em></p>
<p><em>斜体文本</em></p>
<p><strong>粗体文本</strong></p>
<p><strong>粗体文本</strong></p>
<p><em><strong>粗斜体文本</strong></em></p>
<p><em><strong>粗斜体文本</strong></em></p>
<hr>
<p>分割线</p>
<hr>
<p>删除线</p>
<p><del>biubiu</del></p>
<p>下划线</p>
<p><u>biubiubiu</u></p>
<p>创建文本补充说明 脚注<a href="%E4%BD%BF%E7%94%A8%E6%AD%A4%E7%AC%A6%E5%8F%B7">^RUNOOB</a>。  </p>
<hr>
<h1 id="列表书写格式"><a href="#列表书写格式" class="headerlink" title="列表书写格式"></a><strong>列表书写格式</strong></h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h2><ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h2><ol>
<li>第一项<ul>
<li>你好</li>
<li>这里是</li>
<li>列表嵌套</li>
</ul>
</li>
<li>第二项<ul>
<li>使用’-‘加空格就行</li>
<li>biu</li>
</ul>
</li>
<li>第三项<ul>
<li>记得在’-‘前添加两个或四个空格</li>
</ul>
</li>
</ol>
<blockquote>
<p>区块引用<br>是你吗<br>呼啦啦<br>biubiu</p>
</blockquote>
<blockquote>
<p>刘大昌</p>
</blockquote>
<blockquote>
<p>的个人博客</p>
</blockquote>
<hr>
<p>仅练习记录</p>
<hr>
]]></content>
      <categories>
        <category>文书</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
